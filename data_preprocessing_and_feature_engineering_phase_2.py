# -*- coding: utf-8 -*-
"""Data Preprocessing and feature engineering- Phase-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VOTFHfVpmY0kXHXTFxbSRT8n_pU1GWql
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df1 = pd.read_csv('/content/drive/MyDrive/titanic.csv')
df2 = pd.read_csv('/content/drive/MyDrive/application_train.csv')

df1.head()

df2.head()

df1.tail()

df2.tail()

df1.shape

df2.shape

df1.info()

df2.info()

sns.boxplot(x=df1['Age'])
plt.show()

q1 = df1['Age'].quantile(0.25)
q2 = df1['Age'].quantile(0.50)
q3 = df1['Age'].quantile(0.75)
iqr = q3-q1
up = q3+1.5*iqr
low = q1-1.5*iqr

outliers = (df1['Age']<low) | (df1['Age']>up)
df1[outliers]

print(df1[outliers].index)

print(df1[outliers].any(axis=None))

def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.75):
    quartile1 = dataframe[col_name].quantile(q1)
    quartile3 = dataframe[col_name].quantile(q3)
    interquantile_range = quartile3 - quartile1
    up_limit = quartile3 + 1.5 * interquantile_range
    low_limit = quartile1 - 1.5 * interquantile_range
    return low_limit, up_limit

print(outlier_thresholds(df1, "Age"))

low, up = outlier_thresholds(df1, "Fare")
outlier = (df1["Fare"] < low) | (df1["Fare"] > up)
df1[outlier].head()

def check_outlier(dataframe, col_name):
    low_limit, up_limit = outlier_thresholds(dataframe, col_name)
    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):
        return True
    else:
        return False

print(check_outlier(df1, "Age"))
print(check_outlier(df1, "Fare"))

def grab_col_names(dataframe, cat_th=10, car_th=20):

    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == "O"]
    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and dataframe[col].dtypes != "O"]
    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and dataframe[col].dtypes == "O"]
    cat_cols = cat_cols + num_but_cat
    cat_cols = [col for col in cat_cols if col not in cat_but_car]
    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != "O" and col not in num_but_cat]

    print(f"Observations: {dataframe.shape[0]}")
    print(f"Variables: {dataframe.shape[1]}")
    print(f"cat_cols: {len(cat_cols)}")
    print(f"num_cols: {len(num_cols)}")
    print(f"cat_but_car: {len(cat_but_car)}")
    print(f"num_but_cat: {len(num_but_cat)}")

    return cat_cols, num_cols, cat_but_car

cat_cols, num_cols, cat_but_car = grab_col_names(df1)

df = df1
low, up = outlier_thresholds(df, "Fare")
filt = (df["Fare"] < low) | (df["Fare"] > up)
print("No. of Fare Outlier entry is: ", df.shape[0]-df[~filt].shape[0])

def remove_outlier(dataframe, col_name):
    low_limit, up_limit = outlier_thresholds(dataframe, col_name)
    df_without_outliers = dataframe[~((dataframe[col_name] < low_limit) | (dataframe[col_name] > up_limit))]
    return df_without_outliers

cat_cols, num_cols, cat_but_car = grab_col_names(df)

num_cols.remove('PassengerId')

for col in num_cols:
    df = remove_outlier(df,col)

print(df.shape)

def replace_with_thresholds(dataframe, variable):
    low_limit, up_limit = outlier_thresholds(dataframe, variable)
    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit
    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit

df = df1

cat_cols, num_cols, cat_but_car = grab_col_names(df)
num_cols.remove('PassengerId')

for col in num_cols:
    print(col, check_outlier(df, col))

for col in num_cols:
    replace_with_thresholds(df, col)

for col in num_cols:
    print(col, check_outlier(df, col))

df = sns.load_dataset('diamonds')
print(df.shape)
df.head()

df = df.select_dtypes(['float64', 'int64'])
df = df.dropna()
print(df.shape)

for col in df.columns:
    print(col, check_outlier(df, col))

low, up = outlier_thresholds(df, "carat")
print(df[((df["carat"] < low) | (df["carat"] > up))].shape)

low, up = outlier_thresholds(df, "depth")
print(df[((df["depth"] < low) | (df["depth"] > up))].shape)

from sklearn.neighbors import LocalOutlierFactor

clf = LocalOutlierFactor(n_neighbors=20)

clf.fit_predict(df)

df_scores = clf.negative_outlier_factor_
print(df_scores)

print(np.sort(df_scores)[0:5])

scores = pd.DataFrame(np.sort(df_scores))
scores.plot(stacked=True, xlim=[0, 20], style='.-')
plt.show()